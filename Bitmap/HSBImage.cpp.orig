#include "HSBImage.h"

template <typename T>
inline void RGB2HSB(int r, int g, int b, HSBColor<T>* pHSB)
{
	int max = max(max(r, g), b);
	int min = min(min(r, g), b);

	float pHSB->B = max / 255.0f;
	float pHSB->S = max == 0 ? 0 : (max - min) / (float) max;

	pHSB->H = 0;
	/*if (max == r && g >= b)
	pHSB->H =(T)( (g - b) * 60f / (max - min) + 0);
	else if (max == r && g < b)
	pHSB->H = (T)( (g - b) * 60f / (max - min) + 360);
	else if (max == g)
	pHSB->H =(T)(  (b - r) * 60f / (max - min) + 120);
	else if (max == b)
	pHSB->H = (T)( (r - g) * 60f / (max - min) + 240);*/
}

template <typename T>
HSBImage<T>::HSBImage(Bitmap& bitmap)
{
	this->width = bitmap.Width();
	this->height = bitmap.Height();
	data = malloc(this->width * this->height * sizeof(T) * 3);
	HSBColor<T>* p=(HSBColor<T>*)data;
	for(UINT32 y = 0; y < height; y++)
	{
		for(UINT32 x = 0; x < width; x++)
		{
			RGBQUAD rgb=bitmap.GetPixel(x, y);
			RGB2HSB<T>(rgb.rgbRed,rgb.rgbGreen,rgb.rgbBlue,	p);
			p++;
		}
	}
}
template <typename T>
HSBColor<T> HSBImage<T>::GetPixel(UINT32 x,UINT32 y) const
{
	BYTE* p =(BYTE*)data+(y*height+x)*sizeof(T)*3;
	return *(HSBColor<T>*) p     ;
}
template <typename T>
UINT32 HSBImage<T>::Width() const
{
	return this->width;
}
template <typename T>
UINT32 HSBImage<T>::Height() const
{
	return this->height;
}